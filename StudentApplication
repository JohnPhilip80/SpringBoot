Create your Workspace folder
	D drive
	create folder by your name
	under your name folder create folder SpringBootProjects
	D:/John/SpringBootProjects

Create Spring Boot Project
	https://start.spring.io/
		Project - Maven
		Language - Java
		Spring Boot - 3.4.4
		Project Metadata
		Group - com.dsu.john
		Artifact - student
		Name - 
		Description -
		Package name - com.dsu.john.student
		Packaging - Jar
		Java - 17
	Dependencies
		click Add Dependencies
		enter Spring Web
		select the first one.
		click Generate

Extract Project zip folder to your workspace folder
	Go to your downloads folder (open folder explorer, left hand side 'downloads' folder will be there).
	student zip file. right click. click 'Extract all ...'
	click 'browse' button. go to 'SpringBootProjects' folder under your name folder (created early). 
	dont open the 'SpringBootProjects' folder. just select that folder. click 'Select Folder' button.
	click extract.
	'student' folder will be created under your 'SpringBootProjects' folder.

Open your Workspace folder in Eclipse
	Open Eclipse
	File -> Switch Workspace
	check your SpringBootProjects folder is selected. if not browse and select that folder.
	click 'Launch'

Open student project in eclipse
	File -> Open Projects from File System...
	click 'Directory' button.
	go to your 'SpringBootProjects' folder. 
	select 'student' folder. dont open it. click select folder.
	click finish.

Hello World Program in Console. 
	Expand src/main/java/
	Expand the base package com.dsu.john.student
	StudentApplication.java - open by double click
	Next to the line SpringApplication.run(StudentApplication.class, args);
	type System.out.println("Hello World");
	save file.
	Run -> Run As -> Java Application
	Click on Terminate button (red color button) in the console.
	

Create 3 packages - repositories, services and controllers
	Right click on com.cca.john.student
	New -> Package -> Name: com.cca.john.studet.repositories -> Finish
	Right click on com.cca.john.student
	New -> Package -> Name: com.cca.john.studet.services -> Finish
	Right click on com.cca.john.student
	New -> Package -> Name: com.cca.john.studet.controllers -> Finish
	
	
Create 3 Classes - StudentRepository, StudentService, StudentConsoleController
	Right click on repositories package
	New -> Class -> Name: StudentRepository -> Finish
	Right click on services package
	New -> Class -> Name: StudentService -> Finish
	Right click on controllers package
	New -> Class -> Name: StudentConsoleController -> Finish
	
	
Create Constructors and Getters and Setters in StudentRepository, StudentService and StudentConsoleController
	Open StudentRepository.java
		Create a private string object studentName inside the class.
			private String studentName;
		Inside the class, right click -> Source -> Generate Constructor from Superclass...
		Assign your name in the constructor
			studentName = "John";
		Inside the class, right click -> Source -> Generate Getters and Setters...
	
	Open StudentService.java
		Create a private StudentRepository object reference repo inside the class.
			private StudentRepository repo;
		Import the class
			import com.cca.john.student.repositories.StudentRepository;
		Inside the class, right click -> Source -> Generate Constructor from Superclass...
		Create StudentRepository object in the constructor
			repo = new StudentRepository();
		Create a method getStudentName in the class.
			public String getStudentName() {
				return repo.getStudentName();
			}
			
	Open StudentConsoleController.java
		Create a private StudentService object reference service inside the class.
			private StudentService service;
		import com.cca.john.student.services.StudentService;
		Inside the class, right click -> Source -> Generate Constructor from Superclass...
		Create StudentService object in the constructor
			service = new StudentService();
		Create a method getStudentName in the class.
			public String getStudentName() {
				return service.getStudentName();
			}

Hello Student Program in Console
	Create StudentConsoleController object and call the getStudentName method inside the main method of StudentApplication class.
		StudentConsoleController ctr = new StudentConsoleController();
		System.out.println("Hello " + ctr.getStudentName());
	Import StudentConsoleController class
		import com.cca.john.student.controllers.StudentConsoleController;
	Run the Program.
	Terminate the program.

Hello Student program in REST (using Postman)
	Create StudentRESTController class.
		Right click on controllers package
		New -> Class -> Name: StudentRESTController -> Finish
		Create a private StudentService object reference service inside the class.
			private StudentService service;
		import com.cca.john.student.services.StudentService;
		Inside the class, right click -> Source -> Generate Constructor from Superclass...
		Create StudentService object in the constructor
			service = new StudentService();
		Create a method getStudentName in the class.
			public String getStudentName() {
				return "Hello" +  service.getStudentName();
			}
		Annotate @RestController above the class StudentRESTController.
		Annotate @RequestMapping("/rest") above the class StudentRESTController.
		Annotate @GetMapping("studentname") above the method getStudentName.
		Import the classes:
			import org.springframework.web.bind.annotation.RestController;
			import org.springframework.web.bind.annotation.RequestMapping;
			import org.springframework.web.bind.annotation.GetMapping;
	
	Test the program in Postman application.
		Open Postman Application
		Operation: GET
		URL: http://localhost:8080/rest/studentname
		Click Send button.

Add Thymeleaf Dependency in the Pom.xml file
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-thymeleaf</artifactId>
	</dependency>

Update Maven Package
	Right click on pom.xml file. 
	Maven -> Update Project... -> Select your project is checked, Check 'Force Update of Snapshots/Releases -> Finish 

Home Page html file creation
	Create a folder 'student' under src/main/resources/templates.
	Create a file named 'homePage.html' under student folder.
	<!doctype html>
	<html>
		<head>
			<title>Student App</title>
		</head>
		<body>
			<h1>Hello Student</h1>
		</body>
	</html>

Hello Student program in HTML UI (using Browser)
	Create StudentUIController class.
		Right click on controllers package
		New -> Class -> Name: StudentUIController -> Finish
		Inside the class, right click -> Source -> Generate Constructor from Superclass...
		Create a method showHomePage in the class.
			public String showHomePage() {
				return "/student/homePage";
			}
		Annotate @Controller above the class StudentUIController.
		Annotate @RequestMapping("/ui") above the class StudentUIController.
		Annotate @GetMapping("studentname") above the method showHomePage.
		Import the classes:
			import org.springframework.stereotype.Controller;
			import org.springframework.web.bind.annotation.GetMapping;
			import org.springframework.web.bind.annotation.RequestMapping;
	Run the program.	
	
Hello <Your Name> in HTML UI 
	Open StudentUIController class.
	Change the showHomePage method 
	@GetMapping("/studentname")
	public String showHomePage(Model model) {
		String nameDto = "Welcome John";
		model.addAttribute("nameDto",nameDto);
		return "/student/homePage";
	}
	Import Model class:
		import org.springframework.ui.Model;
	Open homePage.html file
	Change the body tag as:
		<body>
			<h1 th:text="${nameDto}"></h1>
		</body>
	Test in Browser
		Open Browser
		URL: http://localhost:8080/ui/studentname

Include Dev Tools dependency
	Copy following dependency and paste in the pom.xml 
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-devtools</artifactId>
		<scope>runtime</scope>
		<optional>true</optional>
	</dependency>
	Update Maven Package.
	Save and Run.
	
Student Model creation 
	Create package named 'models' (com.cca.john.student.models)
		Right click on com.cca.john.student
		New -> Package -> Name: com.cca.john.student.models -> Finish
	Create class named Student in the models package. Create private data in the class.
		public class Student {
			private Long rno;
			private String name;
			private String course;
			private Double percentage;
		}
	Generate parameterized and default constructors.
	Generate Setter and Getter Methods.

Create Interface CRUDoperations inside the models package.
	Right click on com.cca.john.student.models -> New -> Interface -> CRUDoperations -> Finish
	Provide the CRUDoperations method signatures.
		public interface CRUDoperations<T1,T2> {
			public void createItem(T1 item);
			public List<T1> readAllItems();
			public void updateItem(T1 item);
			public void deleteItem(T2 id);
			public T1 getItemById(T2 id);
		}
	Import classes
		import java.util.List;
	Save it.

CRUD Implementation
	Open StudentRepository.java
		StudentRepository class should implement CRUDoperations interface.
			public class StudentRepository implements CRUDoperations<Student,Long> {}
		Import classes
			import com.cca.john.student.models.CRUDoperations;
			import com.cca.john.student.models.Student;
		Add unimplemented methods
			keep mouse pointer on class StudentRepository 
			click on 'Add unimplemented methods' in the quick fix.
	Save it.
	
Create 4 students objects in an arraylist
	Open StudentRepository.java
		Update the Constructor method 
		public StudentRepository() {
			super();
			studentName = "John";
			students = new ArrayList<Student>(Arrays.asList(
					new Student(1L,"Murgan","Java Core",65.5),
					new Student(2L,"Sivan","JSP",75.5),
					new Student(3L,"Raman","Spring Boot",95.5),
					new Student(4L,"Saraswathi","Hibernate",85.5)));
		}
		Import classes 
			import java.util.ArrayList;
			import java.util.Arrays;
			import java.util.List;
	
Read All Students Operation in Console
	Open StudentRepository.java
		Implement readAllItems method
		@Override
		public List<Student> readAllItems() {
			return students;
		}
	Open StudentService.java
		Add readAllStudents method
		public List<Student> readAllStudents() {
			return repo.readAllItems();
		}
		Import classes 
			import java.util.List;
			import com.cca.john.student.models.Student
	Open StudentConsoleController.java
		Add readAllStudents method
		public List<Student> readAllStudents() {
			return service.readAllStudents();
		}
		Import classes 
			import java.util.List;
			import com.cca.john.student.models.Student;
	Open StudentApplication.java
		Update the main method and add studentList method.
		public static void main(String[] args) {
			SpringApplication.run(StudentApplication.class, args);
			StudentConsoleController ctr = new StudentConsoleController();
			studentList(ctr);
		}
		public static void studentList(StudentConsoleController ctr) {
			List<Student> students = ctr.readAllStudents();
			System.out.println("Rno --  Name  -- Course  --   Percentage");
			for(int i=0;i<students.size();i++) {
				System.out.println(students.get(i).getRno() + " -- " + 
									students.get(i).getName() + " -- " +
									students.get(i).getCourse() + " -- " +
									students.get(i).getPercentage());
			}
		}
		Import classes
			import java.util.List;
			import com.cca.john.student.models.Student;
	Run the program.
	Terminate the program.

Read All Students operation in REST 
	Open StudentRESTController.java
		Add studentList method
		@GetMapping("/studentlist")
		public List<Student> studentList() {
			return service.readAllStudents();
		}
		Import classes
			import java.util.List;
			import com.cca.john.student.models.Student;
	Test the program in Postman application.
		Open Postman Application
		Operation: GET
		URL: http://localhost:8080/rest/studentlist
		Click Send button.
		
Read All Students operation in Browser 
	Create studentList.html in src/main/resources/templates/student folder.
	Right Click on templates/student folder -> New -> File -> File name: studentList.html  -> Finish 
		<!doctype html>
		<html>
			<head>
				<title>Students</title>
			</head>
			<body>
				<h1>Student List</h1>
				<button onclick="location.href = '/ui/createstudent'">Add New Student</button>
				<table border="2" width="80%">
					<thead>
						<tr>
							<th>Roll No</th>
							<th>Name</th>
							<th>Course</th>
							<th>Percentage</th>
							<th>Actions</th>
						</tr>
					</thead>
					<tbody>
						<tr th:each="student : ${students}">
							<td th:text="${student.rno}"></td>
							<td th:text="${student.name}"></td>
							<td th:text="${student.course}"></td>
							<td th:text="${student.percentage}"></td>
							<td>
								<a th:href="@{/ui/updatestudent(rno=${student.rno})}">Edit</a>
								<a th:href="@{/ui/deletestudent(rno=${student.rno})}" onclick="return confirm('Are you sure?')">Delete</a>
							</td>
						</tr>
					</tbody>
				</table>
			</body>
		</html>
	Open StudentUIController.java
		Add studentList method
			@GetMapping("/studentlist")
			public String studentList(Model model) {
				List<Student> students = service.readAllStudents();
				model.addAttribute("students",students);
				return "/student/studentList";
			}
		Import classes
			import java.util.List;
			import org.springframework.ui.Model;
			import com.cca.john.student.models.Student;
			import com.cca.john.student.services.StudentService;
	Save it. Terminate the program if already running.
	Open Browser and test it.
	URL: http://localhost:8080/ui/studentlist
	
Create Student Operation in Console
	Open StudentRepository.java
		Implement createItem method
		@Override
		public void createItem(Student item) {
			students.add(item);
		}
	Open StudentService.java
		Add createStudent method
		public void createStudent(Student student) {
			repo.createItem(student);
		}
	Open StudentConsoleController.java
		Add createStudent method
		public void createStudent(Student student) {
			service.createStudent(student);
		}
	Open StudentApplication.java
		Add a method createStudent after the main method.
			public static void createStudent(StudentConsoleController ctr) {
				Student student = new Student(5l,"Krishnan","Block Chain",92.6);
				ctr.createStudent(student);
			}
		Call this method in the main method.
			public static void main(String[] args) {
				SpringApplication.run(StudentApplication.class, args);
				StudentConsoleController ctr = new StudentConsoleController();
				studentList(ctr);
				createStudent(ctr);
				studentList(ctr);
			}
	Run the program.
	Terminate the program.

Create Student Operation in REST
	Open StudentRESTController.java
		Add createNewStudent method
		@PostMapping("/createstudent")
		public String createNewStudent(@RequestBody Student student) {
			service.createStudent(student);
			return "Success";
		}
	Test Create Student operation in Postman application.
		Open Postman Application
		Operation: POST
		URL: http://localhost:8080/rest/createstudent
		Request Body -> raw -> JSON
			{
				"rno": 7,
				"name": "Vinayak",
				"course": ".NET",
				"percentage": 75.5
			}
		Click Send button.
	To see the added student	
		Operation: GET
		URL: http://localhost:8080/rest/studentlist
		Click Send button.
	
Create Student Operation in Browser
	Create a class named StudentDto in the com.cca.john.student.models package. 
		Right click models package -> New -> Class -> Class name: StudentDto -> Finish.
		Create private data in the class.
		public class StudentDto {
			private Long rno;
			private String name;
			private String course;
			private Double percentage;
		}
		Generate parameterized and default constructors.
		Generate Setter and Getter Methods.
		Save it.
	Open StudentUIController.java 
		Add GetMapping and PostMapping createStudent methods.
		@GetMapping("/createstudent")
		public String createStudent(Model model) {
			StudentDto studentDto	 = new StudentDto();
			model.addAttribute("studentDto",studentDto);
			return "student/createStudent";
		}
		@PostMapping("/createstudent")
		public String createStudent(@ModelAttribute StudentDto studentDto) {
			Student student = new Student();
			student.setRno(studentDto.getRno());
			student.setName(studentDto.getName());
			student.setCourse(studentDto.getCourse());
			student.setPercentage(studentDto.getPercentage());
			service.createStudent(student);
			return "redirect:/ui/studentlist";
		}
		Import classes
			import com.cca.john.student.models.StudentDto;
	Create createStudent.html under src/main/resources/templates/student folder
		Right Click on templates/student folder -> New -> File -> File name: createStudent.html  -> Finish 
		<!doctype html>
		<html>
			<head>
				<title>Student Management System</title>
			</head>
			<body>
				<h1>New Student</h1>
				<form method="post" th:object="${studentDto}">
					<table width = 60%>
						<tr>
							<td>Roll No:</td>
							<td> <input th:field="${studentDto.rno}"></td>
						</tr>
						<tr>
							<td>Name:</td>
							<td> <input th:field="${studentDto.name}"></td>
						</tr>
						<tr>
							<td>Course</td>
							<td> <input th:field="${studentDto.course}"></td>
						</tr>
						<tr>
							<td>Percentage</td>
							<td> <input th:field="${studentDto.percentage}"></td>
						</tr>
						<tr>
							<td><button type ="submit">Submit</button></td>
							<td><button onclick="location.href = '/ui/studentlist'" >Cancel</button></td>
						</tr>
					</table>
				</form>
			</body>
		</html>
	Save it.
	Test Create Student Operation in Browser
		Open Browser and URL: http://localhost:8080/ui/studentlist
		Click Add New Student button.
		Fill new student roll no, name, course and percentage.
		Click submit.
		New student is added.

Update Student in Console
Open StudentRepository.java
		Implement updateItem method
		@Override
		public void updateItem(Student student) {
			students.add(student);
		}
	Open StudentService.java
		Add updateStudent method
		public void updateStudent(Student student) {
			repo.createItem(student);
		}
	Open StudentConsoleController.java
		Add updateStudent method
		public void updateStudent(Student student) {
			service.updateStudent(student);
		}
	Open StudentApplication.java
		Add a method updateStudent after the createStudent method.
			public static void updateStudent(StudentConsoleController ctr) {
				List<Student> students = ctr.readAllStudents();
				Student student = students.get(2);
				student.setName("Sekhar");
				student.setCourse("Angular");
				student.setPercentage(71.5);
				ctr.updateStudent(student);
			}
		Call this method in the main method.
			public static void main(String[] args) {
				SpringApplication.run(StudentApplication.class, args);
				StudentConsoleController ctr = new StudentConsoleController();
				studentList(ctr);
				updateStudent(ctr);
				studentList(ctr);
			}
	Run the program.
	Terminate the program.
	
Update Student in REST
	Open StudentRESTController.java
		Add updateStudent method
		@PutMapping("/updatestudent")
		public String updateStudent(@RequestBody Student student) {
			service.updateStudent(student);
			return "Success";
		}
	Test Create Student operation in Postman application.
		Open Postman Application
		Operation: PUT
		URL: http://localhost:8080/rest/updatestudent
		Request Body -> raw -> JSON
			{
				"rno": 4,
				"name": "Saraswathi Devi",
				"course": "Hibernate and Java",
				"percentage": 66.6
			}
		Click Send button.
	To see the added student	
		Operation: GET
		URL: http://localhost:8080/rest/studentlist
		Click Send button.
		
Update Student Operation in Browser 
	Open StudentRepository.java
		Implement getItemById method
		@Override
		public Student getItemById(Long id) {
			int index =0;
			for(int i=0;i<students.size();i++) {
				if(students.get(i).getRno() == id) {
					index = i;
				}
			}
			return students.get(index);
		}
	Open StudentService.java
		Add getStudentByRno method
		public Student getStudentByRno(Long rno) {
			return repo.getItemById(rno);
		}
	Open StudentUIController.java 
		Add GetMapping and PostMapping updateStudent methods.
		@GetMapping("/updatestudent")
		public String updateStudent(Model model,@RequestParam("rno") Long rno) {
				Student student = service.getStudentByRno(rno);
				StudentDto studentDto = new StudentDto();
				studentDto.setRno(student.getRno());
				studentDto.setName(student.getName());
				studentDto.setCourse(student.getCourse());
				studentDto.setPercentage(student.getPercentage());
				model.addAttribute("studentDto",studentDto);
				return "student/updateStudent";
		}
		@PostMapping("/updatestudent")
		public String updateStudent(@RequestParam("rno") Long rno, @ModelAttribute StudentDto studentDto) {
				Student student = service.getStudentByRno(rno);
				student.setName(studentDto.getName());
				student.setCourse(studentDto.getCourse());
				student.setPercentage(studentDto.getPercentage());
				service.updateStudent(student);
				return "redirect:/ui/studentlist";
		}
	Create updateStudent.html under src/main/resources/templates/student folder
		Right Click on templates/student folder -> New -> File -> File name: updateStudent.html  -> Finish 
		<!doctype html>
		<html>
			<head>
				<title>Student Management System</title>
			</head>
			<body>
				<h1>Update Student</h1>
				<form method="post" th:object="${studentDto}">
					<table width = 60%>
						<tr>
							<td>Roll No:</td>
							<td> <input readonly th:field="${studentDto.rno}"></td>
						</tr>
						<tr>
							<td>Name:</td>
							<td> <input th:field="${studentDto.name}"></td>
						</tr>
						<tr>
							<td>Course:</td>
							<td> <input th:field="${studentDto.course}"></td>
						</tr>
						<tr>
							<td>Percentage:</td>
							<td> <input th:field="${studentDto.percentage}"></td>
						</tr>
						<tr>
							<td><button type ="submit">Submit</button></td>
							<td><button onclick="location.href = '/ui/studentlist'" >Cancel</button></td>
						</tr>
					</table>
					
				</form>

			</body>
		</html>
	Save it.
	Test Update Student Operation in Browser
		Open Browser and URL: http://localhost:8080/ui/studentlist
		Click Edit link in any of the student.
		update Student name, course and percentage.
		Click submit.
		Student is updated.
		
Delete Student Operation in Console
	Open StudentRepository.java
		Implement deleteItem method
		@Override
		public void deleteItem(Long rno) {
			int index =0;
			for(int i=0;i<students.size();i++) {
				if(students.get(i).getRno() == rno) {
					index = i;
				}
			}
			students.remove(index);
		}
	Open StudentService.java
		Add deleteStudent method
		public void deleteStudent(Long rno) {
			repo.deleteItem(rno);
		}
	Open StudentConsoleController.java
		Add deleteStudent method
		public void deleteStudent(Long rno) {
			service.deleteStudent(rno);
		}
	Open StudentApplication.java
		Add a method deleteStudent after the updateStudent method.
		public static void deleteStudent(StudentConsoleController ctr) {
			ctr.deleteStudent(2l);
		}
		Call this method in the main method.
			public static void main(String[] args) {
				SpringApplication.run(StudentApplication.class, args);
				StudentConsoleController ctr = new StudentConsoleController();
				studentList(ctr);
				deleteStudent(ctr);
				studentList(ctr);
			}
	Run the program.
	Terminate the program.

Delete Student Operation in REST
	Open StudentRESTController.java
		Add deleteStudent method
		@DeleteMapping("/deletestudent/{rno}")
		public void deleteStudent(@PathVariable("rno") Long rno) {
			service.deleteStudent(rno);
		}
	Test Delete Student operation in Postman application.
		Open Postman Application
		Operation: DELETE
		URL: http://localhost:8080/rest/deletestudent/3
		Click Send button.
	To see the student list
		Operation: GET
		URL: http://localhost:8080/rest/studentlist
		Click Send button.

Delete Student Operation in Browser
	Open StudentUIController.java 
		Add GetMapping deleteStudent method.
		@GetMapping("/deletestudent")
		public String deleteStudent(@RequestParam("rno") Long rno) {
			service.deleteStudent(rno);
			return "redirect:/ui/studentlist";
		}
	Save and Run.
	Open Student List in the browser.
	Click on the delete link of any student.
	
Create Schema (john_student) in MySQL Workbench 

Add Jpa and MySQL dependencies in pom.xml file
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-data-jpa</artifactId>
	</dependency>
	<dependency>
		<groupId>com.mysql</groupId>
		<artifactId>mysql-connector-j</artifactId>
		<scope>runtime</scope>
	</dependency>

Update Maven Project
	Right click pom.xml file -> Update Project -> Finish

Update src/main/resources/application.properties file
Provide the database name (just now created schema name in MySQL Workbench) in the second line properly.
	spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
	spring.datasource.url=jdbc:mysql://localhost:3306/john_student
	spring.datasource.username=root
	spring.datasource.password=Admin@123
	spring.jpa.show-sql=true
	spring.jpa.hibernate.ddl-auto=update
	
Java class to Entity
	Open Student.java from models
	Annotate @Entity and @Table before the class Student 
		@Entity
		@Table(name="student")
		public class Student {}
	Annotate @Id and @GeneratedValue before the rno field
		@Id
		@GeneratedValue(strategy=GenerationType.IDENTITY)
		private Long rno;
	Save and Run. Open the MySQL Workbench and check student table is created.

Create StudentRepositoryDB interface and extend JpaRepository interface
	Right click repositories package -> New -> Interface -> Name: StudentRepositoryDB -> Finish 
	Annotate, extend and add a method getByRno.
		@Repository
		public interface StudentRepositoryDB extends JpaRepository<Student,Long> {
			public Student getByRno(Long rno);
		}
	Import classes.
		import org.springframework.data.jpa.repository.JpaRepository;
		import org.springframework.stereotype.Repository;
		import com.cca.john.student.models.Student;
	Save it.

Create StudentServiceDB class
	Right click services package -> New -> Class -> Name: StudentServiceDB -> Finish 
	Annotate and implement CRUD operations by calling repository methods.
		@Service
		public class StudentServiceDB {
			@Autowired
			private StudentRepositoryDB repo;
			public List<Student> readAllStudents() {
				return repo.findAll();
			}
			public void createStudent(Student student) {
				repo.save(student);
			}
			public void updateStudent(Student student) {
				repo.save(student);
			}
			public Student getStudentByRno(Long rno) {
				return repo.getByRno(rno);
			}
			public void deleteStudent(Long rno) {
				repo.deleteById(rno);
			}
		}
	Import classes
		import java.util.List;
		import org.springframework.beans.factory.annotation.Autowired;
		import org.springframework.stereotype.Service;
		import com.cca.john.student.models.Student;
		import com.cca.john.student.repositories.StudentRepositoryDB;
	Save it.
	
Add GET, POST, PUT and DELETE mapping methods for DB.
	Open StudentRestController.java
	Create StudentServiceDB reference as private and annotate it inside the class.
		@Autowired
		private StudentServiceDB serviceDB;
	Add the following methods.
		@GetMapping("/db/studentlist")
		public List<Student> studentListDB() {
			return serviceDB.readAllStudents();
		}
		@PostMapping("/db/createstudent")
		public String createStudentDB(@RequestBody Student student) {
			serviceDB.createStudent(student);
			return "Success";
		}
		@PutMapping("/db/updatestudent")
		public String updateStudentDB(@RequestBody Student student) {
			serviceDB.updateStudent(student);
			return "Success";
		}
		@DeleteMapping("/db/deletestudent/{rno}")
		public void deleteStudentDB(@PathVariable("rno") Long rno) {
			serviceDB.deleteStudent(rno);
		}
	Save it.
	
	
Test 4 Database REST services in Postman application.
	Open Postman.
	Test the GET, POST, PUT and DELETE request by using the following urls.
		http://localhost:8080/rest/db/studentlist
		http://localhost:8080/rest/db/createstudent
		http://localhost:8080/rest/db/updatestudent 
		http://localhost:8080/rest/db/deletestudent/3
	Check the database table for all the updates using MySQL Workbench.







